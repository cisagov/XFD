import React from 'react';
import {
  Box,
  Grid,
  Link as LinkMui,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography
} from '@mui/material';
import { getCVSSColor } from 'pages/Risk/utils';
import {
  Cve as CveType,
  Cpe as ProductInfoType,
  Vulnerability as VulnerabilityType
} from 'types';
import nvd from '../../assets/nvd.jpeg';

interface GroupedByVendor {
  [key: string]: ProductInfoType[];
}

interface HasCVEProps {
  vulnerability: VulnerabilityType;
  cve: CveType | undefined;
  VulnDescription: any;
  CweSection: React.FC;
}

export const CveSection: React.FC<HasCVEProps> = ({
  vulnerability,
  cve,
  VulnDescription,
  CweSection
}) => {
  const references = vulnerability.references.map((ref) => ref);
  if (vulnerability.cve)
    references.unshift({
      name: 'NIST National Vulnerability Database',
      url: `https://nvd.nist.gov/vuln/detail/${vulnerability.cve}`,
      source: '',
      tags: []
    });
  const groupedByVendor: GroupedByVendor = (cve?.cpes ?? []).reduce(
    (acc: GroupedByVendor, current: ProductInfoType) => {
      const { vendor, ...rest } = current;
      // If the vendor exists, push the current object to its array
      if (acc[vendor]) {
        acc[vendor].push(rest);
      } else {
        // Create a new array with the current object
        acc[vendor] = [rest];
      }
      return acc;
    },
    {} as GroupedByVendor
  );
  const SeverityMetricsSection = () => {
    return (
      <Box mt={2}>
        <Typography fontWeight="500" pb={2}>
          CVSS 3.x Severity & Metrics
        </Typography>
        <Grid container spacing={1}>
          <Grid item xs={12} sm={3}>
            <Box
              component="img"
              sx={{ height: 25, width: 30 }}
              alt="NVD"
              src={nvd}
            />
            <Typography
              display="inline"
              variant="subtitle2"
              sx={{ verticalAlign: 'top' }}
            >
              NIST:{' '}
            </Typography>
            <Typography
              display="inline"
              variant="subtitle2"
              fontWeight="regular"
              sx={{ verticalAlign: 'top' }}
            >
              {cve?.cvssV3Source != null
                ? cve?.cvssV3Source.split('@')[0].toUpperCase()
                : null}
            </Typography>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Typography display="inline" variant="subtitle2">
              Base Score:{' '}
            </Typography>
            <Typography
              display="inline"
              variant="subtitle2"
              sx={{
                backgroundColor: getCVSSColor(Number(cve?.cvssV3BaseScore))[0]
              }}
            >
              &nbsp;&nbsp;{cve?.cvssV3BaseScore}&nbsp;
              {getCVSSColor(Number(cve?.cvssV3BaseScore))[1]}&nbsp;&nbsp;
            </Typography>
          </Grid>
          <Grid item xs={12} sm={6}>
            <Typography
              display="inline"
              variant="caption"
              fontWeight="regular"
              sx={{ overflowWrap: 'break-word' }}
            >
              <b>Vector: </b>
            </Typography>
            <Typography
              display="inline"
              variant="caption"
              fontWeight="regular"
              sx={{ overflowWrap: 'break-word' }}
            >
              {cve?.cvssV3VectorString}
            </Typography>
          </Grid>
        </Grid>
        <Typography fontWeight="500" py={2}>
          CVSS 2.0 Severity & Metrics
        </Typography>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={3}>
            <Box
              component="img"
              sx={{ height: 25, width: 30 }}
              alt="NVD"
              src={nvd}
            />
            <Typography
              display="inline"
              variant="subtitle2"
              sx={{ verticalAlign: 'top' }}
            >
              NIST:{' '}
            </Typography>
            <Typography
              display="inline"
              variant="subtitle2"
              fontWeight="regular"
              sx={{ verticalAlign: 'top' }}
            >
              {cve?.cvssV2Source != null
                ? cve?.cvssV2Source.split('@')[0].toUpperCase()
                : null}
            </Typography>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Typography display="inline" variant="subtitle2">
              Base Score:{' '}
            </Typography>
            <Typography
              display="inline"
              variant="subtitle2"
              sx={{
                backgroundColor: getCVSSColor(Number(cve?.cvssV2BaseScore))[0]
              }}
            >
              &nbsp;&nbsp;{cve?.cvssV2BaseScore}&nbsp;
              {getCVSSColor(Number(cve?.cvssV2BaseScore))[1]}&nbsp;&nbsp;
            </Typography>
          </Grid>
          <Grid item xs={12} sm={6}>
            <Typography display="inline" variant="subtitle2">
              Vector:{' '}
            </Typography>
            <Typography display="inline" variant="caption" fontWeight="regular">
              {cve?.cvssV2VectorString}
            </Typography>
          </Grid>
        </Grid>
      </Box>
    );
  };
  const CVEReferences = () => {
    return (
      <>
        <Typography fontWeight="500" mt={2} mb={2}>
          CVE References
        </Typography>
        <TableContainer component={Paper}>
          <Table size="small" aria-label="a dense table">
            <TableHead>
              <TableRow
                sx={{
                  '& th': { backgroundColor: '#07648D', color: 'white' }
                }}
              >
                <TableCell>Hyperlink</TableCell>
                <TableCell>Resource</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {vulnerability.references.map((row) => (
                <TableRow key={row.name}>
                  <TableCell>
                    <LinkMui href={row.url}>{row.url}</LinkMui>
                  </TableCell>
                  <TableCell>{row.source}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </>
    );
  };
  const ProductsAffectedSection = () => {
    return (
      <Paper elevation={2} sx={{ mt: 3, p: 2 }}>
        <Typography fontWeight="500">Products Affected</Typography>
        {Object.keys(groupedByVendor).length > 0
          ? Object.entries(groupedByVendor).map(([vendor, values]) => (
              <div key={vendor}>
                <Typography variant="subtitle2">{vendor}</Typography>
                <Typography variant="body2" component="div">
                  <ul>
                    {values.map((value, index) => (
                      <li key={index}>{value.name}</li>
                    ))}
                  </ul>
                </Typography>
              </div>
            ))
          : 'No products found'}
      </Paper>
    );
  };
  return (
    <>
      <Grid item xs={12} lg={6} p={2} sx={{ minWidth: 200 }}>
        <VulnDescription />
        <CweSection />
        {cve && <CVEReferences />}
      </Grid>
      {cve ? (
        <Grid item sm={12} lg={6} p={2} sx={{ minWidth: 200 }}>
          <SeverityMetricsSection />
          <ProductsAffectedSection />
        </Grid>
      ) : (
        <Grid item sm={12} lg={6} p={2} sx={{ minWidth: 200 }}>
          <CVEReferences />
        </Grid>
      )}
    </>
  );
};
