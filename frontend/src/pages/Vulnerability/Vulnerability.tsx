import React, { useCallback, useEffect, useState } from 'react';
import { Link, useParams, useHistory } from 'react-router-dom';
import { differenceInCalendarDays, parseISO } from 'date-fns';
import { ChevronLeft, OpenInNew } from '@mui/icons-material';
import {
  AppBar,
  Box,
  Grid,
  IconButton,
  Link as LinkMui,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Toolbar,
  Typography
} from '@mui/material';
import { tableCellClasses } from '@mui/material/TableCell';
import { getSeverityColor } from 'pages/Risk/utils';
import { useAuthContext } from 'context';
import {
  Cve as CveType,
  Service,
  Vulnerability as VulnerabilityType
} from 'types';
import { CveSection } from './CveSection';
import { XpanseSection } from './XpanseSection';

interface WebInfoItem {
  label?: string | null;
  value?: string;
}

export const Vulnerability: React.FC = () => {
  const { vulnerabilityId } = useParams<any>();
  const { apiGet } = useAuthContext();
  const [vulnerability, setVulnerability] = useState<VulnerabilityType>();
  const [cve, setCve] = useState<CveType>();
  const history = useHistory();

  const getCve = useCallback(
    (cveName: string | null) => {
      return apiGet(`/cves/name/${cveName}`).then(
        (result) => {
          setCve(result);
          return true;
        },
        (e) => {
          console.error(e);
          return false;
        }
      );
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    [apiGet]
  );

  const fetchVulnerability = useCallback(async () => {
    try {
      const result = await apiGet<VulnerabilityType>(
        `/vulnerabilities/${vulnerabilityId}`
      );
      setVulnerability(result);
      if (result.cve) {
        getCve(result.cve);
      }
    } catch (e) {
      console.error(e);
    }
  }, [vulnerabilityId, apiGet, getCve]);

  useEffect(() => {
    fetchVulnerability();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fetchVulnerability]);

  if (!vulnerability) return <>No Vulnerabilities</>;

  const generateWebInfo = (service: Service): WebInfoItem[] => {
    const categoriesToProducts: Record<string, Set<string>> = {};
    for (const product of service.products) {
      const version = product.version ? ` ${product.version}` : '';
      const value = product.name + version;
      const name =
        product.tags && product.tags.length > 0 ? product.tags[0] : 'Misc';
      if (!categoriesToProducts[name]) {
        categoriesToProducts[name] = new Set();
      }
      categoriesToProducts[name].add(value);
    }
    return Object.entries(categoriesToProducts).reduce(
      (acc, [name, value]) => [
        ...acc,
        {
          label: name,
          value: Array.from(value).join(', ')
        }
      ],
      [] as any
    );
  };

  const references = vulnerability.references.map((ref) => ref);
  if (vulnerability.cve)
    references.unshift({
      name: 'NIST National Vulnerability Database',
      url: `https://nvd.nist.gov/vuln/detail/${vulnerability.cve}`,
      source: '',
      tags: []
    });

  function cweUrl(cwe: string | null): string {
    // Check if the input starts with "CWE-" and extract the ID part
    if (cwe && cwe.startsWith('CWE-')) {
      const id = cwe.replace('CWE-', '');
      return `https://cwe.mitre.org/data/definitions/${id}`;
    }
    return 'https://cwe.mitre.org/data';
  }
  const vulnState =
    vulnerability.state[0].toUpperCase() +
    vulnerability.state.slice(1) +
    ' (' +
    vulnerability.substate[0].toUpperCase() +
    vulnerability.substate.slice(1) +
    ')';
  const product =
    vulnerability.service &&
    vulnerability.service.products.find(
      (product) =>
        vulnerability.cpe &&
        product.cpe &&
        vulnerability.cpe.includes(product.cpe)
    );
  // Calculates the total number of days a vulnerability has been open
  let daysOpen = 0;
  let lastOpenDate = vulnerability.createdAt;
  let lastState = 'open';
  vulnerability.actions.reverse();
  for (const action of vulnerability.actions) {
    if (action.state === 'closed' && lastState === 'open') {
      daysOpen += differenceInCalendarDays(
        parseISO(action.date),
        parseISO(lastOpenDate)
      );
      lastState = 'closed';
    } else if (action.state === 'open' && lastState === 'closed') {
      lastOpenDate = action.date;
      lastState = 'open';
    }
  }

  const OverviewSection = () => {
    return (
      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static">
          <Toolbar variant="dense">
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              {vulnerability.domain.name}
            </Typography>
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="link to the domain page"
              onClick={handleOpenInNewTab(
                `/inventory/domain/${vulnerability.domain.id}`
              )}
            >
              <OpenInNew />
            </IconButton>
          </Toolbar>
        </AppBar>
        <Box sx={{ bgcolor: 'white' }}>
          <Grid container>
            <Grid item sm={12} md={6} minWidth="200px" sx={{ p: '15px' }}>
              <Typography variant="h6" mb={1}>
                Overview
              </Typography>
              <TableContainer sx={{ ml: -2 }}>
                <Table
                  size="small"
                  sx={{
                    [`& .${tableCellClasses.root}`]: {
                      borderBottom: 'none',
                      fontSize: 16
                    }
                  }}
                >
                  <TableBody>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ width: 90 }}>
                        IP:
                      </TableCell>
                      <TableCell scope="row">
                        {vulnerability.domain.ip}
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row">
                        First Seen:
                      </TableCell>
                      <TableCell component="th" scope="row">
                        {differenceInCalendarDays(
                          Date.now(),
                          parseISO(vulnerability.domain.createdAt)
                        ) + ' day(s) ago' || 'N/A'}
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row">
                        Last Seen:
                      </TableCell>
                      <TableCell scope="row">
                        {differenceInCalendarDays(
                          Date.now(),
                          parseISO(vulnerability.domain.updatedAt)
                        ) + ' day(s) ago' || 'N/A'}
                      </TableCell>
                    </TableRow>
                    {/* To-Do: Add back in once an IP Address geolocation service is available. */}
                    {/* <TableRow>
                      <TableCell component="th" scope="row">
                        Country:
                      </TableCell>
                      <TableCell scope="row">
                        {vulnerability.domain.country
                          ? vulnerability.domain.country
                          : 'N/A'}
                      </TableCell>
                    </TableRow> */}
                    <TableRow>
                      <TableCell component="th" scope="row">
                        Organization:
                      </TableCell>
                      <TableCell scope="row">
                        {vulnerability.domain.organization.name || 'N/A'}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
              <br />
              {vulnerability.service &&
                generateWebInfo(vulnerability.service).length > 0 && (
                  <>
                    <Typography variant="h6" mb={1}>
                      Installed (Known) Products
                    </Typography>
                    {generateWebInfo(vulnerability.service).map(
                      ({ label, value }) => (
                        <Typography variant="body1" key={label}>
                          {label}: {value}
                        </Typography>
                      )
                    )}
                  </>
                )}
            </Grid>
            <Grid item sm={12} md={6} sx={{ p: '15px' }}>
              <Typography variant="h6" mb={1}>
                Provenance
              </Typography>
              <TableContainer sx={{ ml: -2 }}>
                <Table
                  size="small"
                  sx={{
                    [`& .${tableCellClasses.root}`]: {
                      borderBottom: 'none',
                      fontSize: 16
                    }
                  }}
                >
                  <TableBody>
                    <TableRow>
                      <TableCell component="th" scope="row" sx={{ width: 140 }}>
                        Root Domain:
                      </TableCell>
                      <TableCell scope="row">
                        {vulnerability.domain.fromRootDomain || 'N/A'}
                      </TableCell>
                    </TableRow>
                    <TableRow>
                      <TableCell component="th" scope="row">
                        Subdomain:
                      </TableCell>
                      <TableCell component="th" scope="row">
                        {vulnerability.domain.name +
                          ' (' +
                          vulnerability.domain.subdomainSource +
                          ')' || 'N/A'}
                      </TableCell>
                    </TableRow>
                    {vulnerability.service && vulnerability.service.service ? (
                      <TableRow>
                        <TableCell component="th" scope="row">
                          Service/Port:
                        </TableCell>
                        <TableCell scope="row">
                          {vulnerability.service.service}
                        </TableCell>
                      </TableRow>
                    ) : vulnerability.service &&
                      vulnerability.service.port &&
                      vulnerability.service.serviceSource ? (
                      <TableRow>
                        <TableCell component="th" scope="row">
                          Service/Port:
                        </TableCell>
                        <TableCell scope="row">
                          {vulnerability.service.port} (
                          {vulnerability.service.serviceSource})
                        </TableCell>
                      </TableRow>
                    ) : (
                      <></>
                    )}
                    {vulnerability.cpe && (
                      <TableRow>
                        <TableCell component="th" scope="row">
                          Product:
                        </TableCell>
                        <TableCell scope="row">{vulnerability.cpe}</TableCell>
                      </TableRow>
                    )}
                    <TableRow>
                      <TableCell component="th" scope="row">
                        Vulnerability:
                      </TableCell>
                      <TableCell scope="row">
                        {vulnerability.title +
                          ' (' +
                          vulnerability.source +
                          ')' || 'N/A'}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>
            </Grid>
          </Grid>
        </Box>
      </Box>
    );
  };
  const VulnHighlightSection = () => {
    return (
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>{vulnerability.title || ''}</TableCell>
              <TableCell>
                <Box
                  component="span"
                  sx={{
                    borderBottom: `6px solid ${getSeverityColor({
                      id: vulnerability?.severity ?? ''
                    })}`,
                    width: '80px'
                  }}
                >
                  {vulnerability?.severity || ''}
                </Box>
              </TableCell>
              <TableCell>{vulnerability?.isKev ? 'Yes' : 'No'}</TableCell>
              <TableCell>
                <Link to={`/inventory/domain/${vulnerability.domain.id}`}>
                  {vulnerability?.domain.name}
                </Link>
              </TableCell>
              <TableCell>
                {product?.name && product?.version
                  ? product.name +
                    (product.version ? ' ' + product.version : '')
                  : vulnerability?.cpe
                  ? vulnerability.cpe
                  : ''}
              </TableCell>
              <TableCell>
                {lastState === 'open'
                  ? (daysOpen += differenceInCalendarDays(
                      new Date(),
                      parseISO(lastOpenDate)
                    ))
                  : daysOpen}
              </TableCell>
              <TableCell>{vulnState}</TableCell>
            </TableRow>
          </TableHead>
        </Table>
      </TableContainer>
    );
  };
  const VulnDescription = () => {
    return (
      <>
        <Typography variant="h6" mt={1} mb={1}>
          Description
        </Typography>
        <Typography variant="body2">{vulnerability.description}</Typography>
      </>
    );
  };
  const CweSection = () => {
    return (
      <TableContainer component={Paper} sx={{ mt: 3, maxWidth: 500 }}>
        <Table size="small">
          <TableHead>
            <TableRow
              sx={{
                '& th': { backgroundColor: '#07648D', color: 'white' }
              }}
            >
              <TableCell>CWE-ID</TableCell>
              <TableCell>Source</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            <TableRow>
              <TableCell>
                {vulnerability.cwe ? (
                  <LinkMui
                    aria-label="link to the CWE site"
                    href={cweUrl(vulnerability.cwe)}
                  >
                    {vulnerability.cwe}
                  </LinkMui>
                ) : (
                  'N/A'
                )}
              </TableCell>
              <TableCell>{vulnerability.source || 'N/A'}</TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    );
  };

  const handleOpenInNewTab = (url: string) => (event: React.MouseEvent) => {
    event.preventDefault();
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  return (
    <React.Fragment>
      <Box ml={2} mt={2}>
        <Link to="# " onClick={() => history.goBack()}>
          <ChevronLeft
            sx={{
              height: '100%',
              verticalAlign: 'middle',
              marginTop: '-2px'
            }}
          ></ChevronLeft>
          Go back
        </Link>
      </Box>
      <Grid container>
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8}>
          <Typography variant="h4" gutterBottom mt={2}>
            Vulnerability Details
          </Typography>
          <OverviewSection />
        </Grid>
        <Grid item xs={1} xl={2} />
        <>
          <Grid item xs={1} xl={2} />
          <Grid item xs={10} xl={8} mt={5}>
            <VulnHighlightSection />
          </Grid>
          <Grid item xs={1} xl={2} />
        </>
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8} mt={5}>
          <Grid container sx={{ backgroundColor: 'white' }}>
            <AppBar position="static">
              <Toolbar variant="dense">
                <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
                  {vulnerability.title || ''}
                </Typography>
                {vulnerability.cve && vulnerability.cve.startsWith('CVE') && (
                  <IconButton
                    size="large"
                    color="inherit"
                    onClick={handleOpenInNewTab(references[0]?.url)}
                    aria-label="link to this CVE's site"
                  >
                    <OpenInNew />
                  </IconButton>
                )}
              </Toolbar>
            </AppBar>
            {vulnerability.source === 'Palo Alto Xpanse' ? (
              <XpanseSection vulnerability={vulnerability} />
            ) : vulnerability.cve && vulnerability.cve.startsWith('CVE') ? (
              <CveSection
                vulnerability={vulnerability}
                cve={cve}
                VulnDescription={VulnDescription}
                CweSection={CweSection}
              />
            ) : (
              <>
                <Grid item sm={12} lg={6} p={2} sx={{ minWidth: 200 }}>
                  <VulnDescription />
                </Grid>
                <Grid item sm={12} lg={6} p={2} sx={{ minWidth: 200 }}>
                  <CweSection />
                </Grid>
              </>
            )}
          </Grid>
        </Grid>
        <Grid item xs={12} sx={{ height: '400px' }} />
      </Grid>
    </React.Fragment>
  );
};
