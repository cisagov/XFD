import React from 'react';
import { Link, useHistory } from 'react-router-dom';
import {
  Box,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip
} from '@mui/material';
import * as RiskStyles from './style';
import { getSeverityColor } from './utils';
import { Vulnerability } from 'types';

interface VulnerabilityCount extends Vulnerability {
  count: number;
}

const VulnerabilityCard = (props: {
  title: string;
  showLatest: boolean;
  showCommon: boolean;
  data: VulnerabilityCount[];
}) => {
  const history = useHistory();

  const { title, showLatest, showCommon, data } = props;
  const { cardRoot, cardSmall, cardTitle, seeAll, header, body, button } =
    RiskStyles.classesRisk;

  const truncateText = (text: string, len: number) => {
    if (text.length <= len) return text;
    return text.substring(0, len) + '...';
  };

  const seeAllLink = '/inventory/vulnerabilities?sort=createdAt&desc=false';

  const seeAllContent =
    showLatest || showCommon ? (
      <div className={seeAll}>
        <p>
          <Link to={seeAllLink} aria-label="See all Vulnerabilities">
            See All Vulnerabilities
          </Link>
        </p>
      </div>
    ) : (
      <></>
    );

  const filteredVulnTableLinkHandler = (
    filteredVulnTableLink: string,
    title: string
  ) => history.push(filteredVulnTableLink, { title: title });

  const vulnerabilityGridContent = data.slice(0, 10).map((vuln) => {
    const filteredVulnTableLink = '/inventory/vulnerabilities';
    const ariaLabel = `Details link to the vulnerabilities table filtered to ${vuln.title}.`;
    const onRowKeyDown = (event: React.KeyboardEvent) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        filteredVulnTableLinkHandler(filteredVulnTableLink, vuln.title);
      }
    };
    return (
      <Tooltip
        title={
          <span className={cardTitle}>
            {truncateText(vuln.description, 120)}
          </span>
        }
        placement="right"
        arrow
        key={vuln.title}
      >
        <TableRow
          tabIndex={0}
          role="button"
          aria-label={`View ${vuln.title} vulnerabilities`}
          onClick={() =>
            filteredVulnTableLinkHandler(filteredVulnTableLink, vuln.title)
          }
          onKeyDown={onRowKeyDown}
        >
          <TableCell scope="row" padding="none" align="center">
            {vuln.count}
          </TableCell>
          <TableCell scope="row" padding="none" align="center">
            {vuln.title}
          </TableCell>
          <TableCell scope="row" padding="none" align="center">
            <Box
              component="p"
              sx={{
                borderBottom: `6px solid ${getSeverityColor({
                  id: vuln.severity ?? ''
                })}`,
                width: '80px',
                display: 'inline-block'
              }}
            >
              {vuln.severity}
            </Box>
          </TableCell>
          <TableCell scope="row" padding="none" align="center">
            <button
              aria-label={ariaLabel}
              className={button}
              onClick={() =>
                filteredVulnTableLinkHandler(filteredVulnTableLink, vuln.title)
              }
            >
              DETAILS
            </button>
          </TableCell>
        </TableRow>
      </Tooltip>
    );
  });

  return (
    <Paper elevation={0} className={cardRoot}>
      <div className={cardSmall}>
        {seeAllContent}
        <div className={header}>
          <h2>{title}</h2>
        </div>
        <div className={body}>
          {data?.length > 0 ? (
            <TableContainer>
              <Table size="small" aria-label="Latest vulnerabilities table">
                <TableHead>
                  <TableRow>
                    <TableCell align="center">Count</TableCell>
                    <TableCell align="center">Vulnerability</TableCell>
                    <TableCell align="center">Severity</TableCell>
                    <TableCell align="center"> </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>{vulnerabilityGridContent}</TableBody>
              </Table>
            </TableContainer>
          ) : (
            <h3>No open vulnerabilities</h3>
          )}
        </div>
      </div>
    </Paper>
  );
};

export default VulnerabilityCard;
