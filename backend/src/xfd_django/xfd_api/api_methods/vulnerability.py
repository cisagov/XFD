"""
Vulnerability API.

"""

# Third-Party Libraries
from django.core.paginator import Paginator
from fastapi import HTTPException

from ..helpers.filter_helpers import filter_vulnerabilities, sort_direction
from ..models import Vulnerability
from ..schema_models.vulnerability import Vulnerability as VulnerabilitySchema
from ..schema_models.vulnerability import VulnerabilityFilters, VulnerabilitySearch


def get_vulnerability_by_id(vuln_id):
    """
    Get vulnerability by id.
    Returns:
        object: a single Vulnerability object.
    """
    try:
        vulnerability = Vulnerability.objects.get(id=vuln_id)
        return vulnerability
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def update_vulnerability(vuln_id, data: VulnerabilitySchema):
    """
    Update vulnerability by id.

    Returns:
        object: a single vulnerability object that has been modified.
    """
    try:
        vulnerability = Vulnerability.objects.get(id=vuln_id)
        vulnerability = data
        vulnerability.save()
        return vulnerability
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def search_vulnerabilities(vulnerability_search: VulnerabilitySearch):
    """
    List vulnerabilities by search filter
    Arguments:
        vulnerability_search: A VulnerabilitySearch object to filter by.
    Returns:
        object: A paginated list of Vulnerability objects
    """
    try:
        # Fetch all domains in list
        vulnerabilities = Vulnerability.objects.all().order_by(
            sort_direction(vulnerability_search.sort, vulnerability_search.order)
        )

        if vulnerability_search.filters:
            vulnerabilities = filter_vulnerabilities(
                vulnerabilities, vulnerability_search.filters
            )

        if vulnerability_search.groupBy:
            vulnerabilities = vulnerabilities.values(
                vulnerability_search.groupBy
            ).order_by()

        paginator = Paginator(vulnerabilities, vulnerability_search.pageSize)
        return paginator.get_page(vulnerability_search.page)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def export_vulnerabilities(vulnerability_filters: VulnerabilityFilters):
    try:
        vulnerabilities = Vulnerability.objects.all()

        if vulnerability_filters:
            vulnerabilities = filter_vulnerabilities(
                vulnerabilities, vulnerability_filters
            )

        # TODO: Integrate methods to generate CSV from queryset and save to S3 bucket
        return vulnerabilities
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
